{"ast":null,"code":"var _jsxFileName = \"/Users/eli/Library/Mobile Documents/com~apple~CloudDocs/Coding/2023 code/ejtos-react_budget_app/src/components/Budget.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState, useEffect } from 'react';\nimport { AppContext } from '../context/AppContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Budget = () => {\n  _s();\n\n  const {\n    budget,\n    expenses,\n    dispatch,\n    currency\n  } = useContext(AppContext);\n  const [newBudget, setNewBudget] = useState(budget.toString()); // convert to string\n\n  const [errorMessage, setErrorMessage] = useState(''); // Calculate total expenses\n\n  const totalExpenses = expenses.reduce((total, item) => total + item.cost, 0); // Function to handle budget change\n\n  const handleBudgetChange = event => {\n    const value = event.target.value;\n    setNewBudget(value);\n    const intValue = parseInt(value, 10);\n\n    if (isNaN(intValue)) {\n      setErrorMessage(`Please enter a valid number.`);\n      return;\n    }\n\n    if (intValue > 20000) {\n      setErrorMessage(`Budget cannot be more than ${currency}20,000.`);\n      return;\n    }\n\n    if (intValue < totalExpenses) {\n      setErrorMessage(`Budget cannot be less than current spending (${currency}${totalExpenses}).`);\n    } else {\n      setErrorMessage('');\n    }\n  }; // Function to update global budget\n\n\n  const handleUpdateBudget = () => {\n    const intValue = parseInt(newBudget, 10);\n\n    if (!isNaN(intValue) && intValue >= totalExpenses && intValue <= 20000) {\n      dispatch({\n        type: 'SET_BUDGET',\n        payload: intValue\n      });\n      setErrorMessage('');\n    }\n  }; // Effect to update displayed budget when the context changes\n\n\n  useEffect(() => {\n    setNewBudget(budget.toString()); // convert to string\n  }, [budget]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"alert alert-secondary\",\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      children: [\"Budget: \", currency, budget]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      placeholder: `${currency} Budget Value`,\n      min: totalExpenses,\n      max: \"20000\",\n      step: \"10\",\n      value: newBudget,\n      onChange: handleBudgetChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleUpdateBudget,\n      children: \"Update Budget\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"alert alert-danger mt-2\",\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 24\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Budget, \"+7jZ5UlAFXPY35FB10Z7QvBf/7U=\");\n\n_c = Budget;\nexport default Budget;\n\nvar _c;\n\n$RefreshReg$(_c, \"Budget\");","map":{"version":3,"names":["React","useContext","useState","useEffect","AppContext","Budget","budget","expenses","dispatch","currency","newBudget","setNewBudget","toString","errorMessage","setErrorMessage","totalExpenses","reduce","total","item","cost","handleBudgetChange","event","value","target","intValue","parseInt","isNaN","handleUpdateBudget","type","payload"],"sources":["/Users/eli/Library/Mobile Documents/com~apple~CloudDocs/Coding/2023 code/ejtos-react_budget_app/src/components/Budget.js"],"sourcesContent":["import React, { useContext, useState, useEffect } from 'react';\nimport { AppContext } from '../context/AppContext';\n\nconst Budget = () => {\n  const { budget, expenses, dispatch, currency } = useContext(AppContext);\n  const [newBudget, setNewBudget] = useState(budget.toString()); // convert to string\n  const [errorMessage, setErrorMessage] = useState('');\n\n  // Calculate total expenses\n  const totalExpenses = expenses.reduce((total, item) => total + item.cost, 0);\n\n  // Function to handle budget change\n  const handleBudgetChange = (event) => {\n    const value = event.target.value;\n    \n    setNewBudget(value);\n\n    const intValue = parseInt(value, 10);\n    \n    if (isNaN(intValue)) {\n      setErrorMessage(`Please enter a valid number.`);\n      return;\n    }\n\n    if (intValue > 20000) {\n      setErrorMessage(`Budget cannot be more than ${currency}20,000.`);\n      return;\n    }\n\n    if (intValue < totalExpenses) {\n      setErrorMessage(`Budget cannot be less than current spending (${currency}${totalExpenses}).`);\n    } else {\n      setErrorMessage('');\n    }\n  };\n\n  // Function to update global budget\n  const handleUpdateBudget = () => {\n    const intValue = parseInt(newBudget, 10);\n\n    if (!isNaN(intValue) && intValue >= totalExpenses && intValue <= 20000) {\n      dispatch({ type: 'SET_BUDGET', payload: intValue });\n      setErrorMessage('');\n    }\n  };\n\n  // Effect to update displayed budget when the context changes\n  useEffect(() => {\n    setNewBudget(budget.toString()); // convert to string\n  }, [budget]);\n\n  return (\n    <div className='alert alert-secondary'>\n      <span>Budget: {currency}{budget}</span>\n      <input\n        type=\"number\"\n        placeholder={`${currency} Budget Value`}\n        min={totalExpenses}\n        max=\"20000\"\n        step=\"10\"\n        value={newBudget}\n        onChange={handleBudgetChange}\n      />\n      <button onClick={handleUpdateBudget}>Update Budget</button>\n      {errorMessage && <div className=\"alert alert-danger mt-2\">{errorMessage}</div>}\n    </div>\n  );\n};\n\nexport default Budget;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,QAA5B,EAAsCC,SAAtC,QAAuD,OAAvD;AACA,SAASC,UAAT,QAA2B,uBAA3B;;;AAEA,MAAMC,MAAM,GAAG,MAAM;EAAA;;EACnB,MAAM;IAAEC,MAAF;IAAUC,QAAV;IAAoBC,QAApB;IAA8BC;EAA9B,IAA2CR,UAAU,CAACG,UAAD,CAA3D;EACA,MAAM,CAACM,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAACI,MAAM,CAACM,QAAP,EAAD,CAA1C,CAFmB,CAE4C;;EAC/D,MAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCZ,QAAQ,CAAC,EAAD,CAAhD,CAHmB,CAKnB;;EACA,MAAMa,aAAa,GAAGR,QAAQ,CAACS,MAAT,CAAgB,CAACC,KAAD,EAAQC,IAAR,KAAiBD,KAAK,GAAGC,IAAI,CAACC,IAA9C,EAAoD,CAApD,CAAtB,CANmB,CAQnB;;EACA,MAAMC,kBAAkB,GAAIC,KAAD,IAAW;IACpC,MAAMC,KAAK,GAAGD,KAAK,CAACE,MAAN,CAAaD,KAA3B;IAEAX,YAAY,CAACW,KAAD,CAAZ;IAEA,MAAME,QAAQ,GAAGC,QAAQ,CAACH,KAAD,EAAQ,EAAR,CAAzB;;IAEA,IAAII,KAAK,CAACF,QAAD,CAAT,EAAqB;MACnBV,eAAe,CAAE,8BAAF,CAAf;MACA;IACD;;IAED,IAAIU,QAAQ,GAAG,KAAf,EAAsB;MACpBV,eAAe,CAAE,8BAA6BL,QAAS,SAAxC,CAAf;MACA;IACD;;IAED,IAAIe,QAAQ,GAAGT,aAAf,EAA8B;MAC5BD,eAAe,CAAE,gDAA+CL,QAAS,GAAEM,aAAc,IAA1E,CAAf;IACD,CAFD,MAEO;MACLD,eAAe,CAAC,EAAD,CAAf;IACD;EACF,CAtBD,CATmB,CAiCnB;;;EACA,MAAMa,kBAAkB,GAAG,MAAM;IAC/B,MAAMH,QAAQ,GAAGC,QAAQ,CAACf,SAAD,EAAY,EAAZ,CAAzB;;IAEA,IAAI,CAACgB,KAAK,CAACF,QAAD,CAAN,IAAoBA,QAAQ,IAAIT,aAAhC,IAAiDS,QAAQ,IAAI,KAAjE,EAAwE;MACtEhB,QAAQ,CAAC;QAAEoB,IAAI,EAAE,YAAR;QAAsBC,OAAO,EAAEL;MAA/B,CAAD,CAAR;MACAV,eAAe,CAAC,EAAD,CAAf;IACD;EACF,CAPD,CAlCmB,CA2CnB;;;EACAX,SAAS,CAAC,MAAM;IACdQ,YAAY,CAACL,MAAM,CAACM,QAAP,EAAD,CAAZ,CADc,CACmB;EAClC,CAFQ,EAEN,CAACN,MAAD,CAFM,CAAT;EAIA,oBACE;IAAK,SAAS,EAAC,uBAAf;IAAA,wBACE;MAAA,uBAAeG,QAAf,EAAyBH,MAAzB;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAEE;MACE,IAAI,EAAC,QADP;MAEE,WAAW,EAAG,GAAEG,QAAS,eAF3B;MAGE,GAAG,EAAEM,aAHP;MAIE,GAAG,EAAC,OAJN;MAKE,IAAI,EAAC,IALP;MAME,KAAK,EAAEL,SANT;MAOE,QAAQ,EAAEU;IAPZ;MAAA;MAAA;MAAA;IAAA,QAFF,eAWE;MAAQ,OAAO,EAAEO,kBAAjB;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAXF,EAYGd,YAAY,iBAAI;MAAK,SAAS,EAAC,yBAAf;MAAA,UAA0CA;IAA1C;MAAA;MAAA;MAAA;IAAA,QAZnB;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAgBD,CAhED;;GAAMR,M;;KAAAA,M;AAkEN,eAAeA,MAAf"},"metadata":{},"sourceType":"module"}